//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input sytem/Player Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controller"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c4469ee1-0a47-4401-8704-93aeb9c9f6f1"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""Value"",
                    ""id"": ""6ccfa7d6-d379-4519-a7d8-9a15cf3a78b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""9d77aa4f-424a-460b-b9c6-e0e5018c0149"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory Open"",
                    ""type"": ""Button"",
                    ""id"": ""859f2aae-e8fa-4254-b879-a83f698123d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""3731a5c3-cfbf-49da-ae7c-c2b140869a3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""ed409c1c-4712-45c3-a5dc-f922f76adefa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSlot"",
                    ""type"": ""Button"",
                    ""id"": ""abb7b074-0738-4ef6-9ced-2d34155ac783"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockedCam"",
                    ""type"": ""Button"",
                    ""id"": ""064a001a-b3e4-45a0-8256-88103f25cf5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractOpen"",
                    ""type"": ""Button"",
                    ""id"": ""46245110-a69d-4f64-84ce-41903772f7ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MapOpen"",
                    ""type"": ""Button"",
                    ""id"": ""0cf07601-2880-4b7a-9ef0-d91a6e83d099"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3590a9bb-6d18-4d60-a03c-cf88f64c231d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Inventory Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ca1203f-514e-4f1d-a52a-51f330aa8def"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Inventory Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7a56e49-a808-48b2-b3d3-90e2ba39cd51"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6ec016e-7ecf-43bf-917d-66d40b0a83c5"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00bd6d14-0caf-4aac-8000-f460490c1ba5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a4b14bf-c597-47cb-9e94-c75d9ea48801"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""a61d4a0c-feac-4ad3-a821-426d0222824c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b54d0ac-2afc-4556-a8ad-cacfade0e17c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""712a4218-de83-479e-bbbb-b9acf2860787"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ff7a3d93-99b6-4893-9c9c-7bd584605233"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6f7ef8c8-1acf-4537-a595-12383a58f9bc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b4cbc8fb-52d7-4d7e-9470-90617059771c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18c2ccfd-bac3-4bbf-afa6-4702ad7f7b2c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ce02fc0-0d45-4835-85f1-380b0c5bd5cb"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80df5e48-a9e1-44ae-81f2-9a8c0741e374"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92a0e969-a5ae-41f7-9577-4bd166c91c98"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""QuickSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b1f48dc-aa93-48d7-934f-904e2cf3b5e6"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LockedCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea92d3a2-f283-47d6-846c-b8d26ed44a00"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockedCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85e31e8e-f57e-436b-93a9-1118cd99c89c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InteractOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bcf7fbb-15ef-4c6c-b5e3-338c6c1bb685"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""InteractOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""933bf7f2-322d-4338-b1fd-78803528753e"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MapOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ec62f8-0508-40b7-8438-fad7f6f63826"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MapOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""4df10539-51e4-44bd-85f0-3cefbf089280"",
            ""actions"": [
                {
                    ""name"": ""InventoryClose"",
                    ""type"": ""Button"",
                    ""id"": ""ad5fa092-e3b5-46ea-9f2e-ef6a8651c2cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36efc170-be27-4443-b961-4a73314353f6"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InventoryClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7b05423-219d-49f8-9c6a-b9bdda8f7ded"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InventoryClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49efd8ca-cdeb-48da-ae2e-2e6c785c3be6"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""InventoryClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e69eeb37-9d56-4e92-b11a-d10f183cbe91"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""InventoryClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""ad791f03-4089-4ee7-8f77-ae1ca858a6ca"",
            ""actions"": [
                {
                    ""name"": ""MapClose"",
                    ""type"": ""Button"",
                    ""id"": ""65e9b4cf-a2b6-4370-8c5c-f1adc1171cfc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7833bf7-53b3-48bb-b0ca-9a88fd1ebcf2"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MapClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49ce84ac-1ed8-4028-bedc-4b771e132838"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MapClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Container"",
            ""id"": ""cc2909bd-b0e0-405a-8f31-6c48fcf7338f"",
            ""actions"": [
                {
                    ""name"": ""ContainerClose"",
                    ""type"": ""Button"",
                    ""id"": ""dfabfb1d-8cfc-4749-9904-ee7e684f5d7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b660424-f2e8-4b77-a675-2e0401b82776"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ContainerClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5697956-fe03-4a3f-b0a8-1594568f4a28"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ContainerClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9003043b-93c1-4a3d-8618-b031153e10e5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ContainerClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90e5c2c4-1f3b-41fb-8701-11ae245a613e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ContainerClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3da741e8-c86b-4668-8458-f98e16fcc207"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ContainerClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movment = m_Player.FindAction("Movment", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_InventoryOpen = m_Player.FindAction("Inventory Open", throwIfNotFound: true);
        m_Player_Roll = m_Player.FindAction("Roll", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_QuickSlot = m_Player.FindAction("QuickSlot", throwIfNotFound: true);
        m_Player_LockedCam = m_Player.FindAction("LockedCam", throwIfNotFound: true);
        m_Player_InteractOpen = m_Player.FindAction("InteractOpen", throwIfNotFound: true);
        m_Player_MapOpen = m_Player.FindAction("MapOpen", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_InventoryClose = m_Inventory.FindAction("InventoryClose", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_MapClose = m_Map.FindAction("MapClose", throwIfNotFound: true);
        // Container
        m_Container = asset.FindActionMap("Container", throwIfNotFound: true);
        m_Container_ContainerClose = m_Container.FindAction("ContainerClose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movment;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_InventoryOpen;
    private readonly InputAction m_Player_Roll;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_QuickSlot;
    private readonly InputAction m_Player_LockedCam;
    private readonly InputAction m_Player_InteractOpen;
    private readonly InputAction m_Player_MapOpen;
    public struct PlayerActions
    {
        private @PlayerController m_Wrapper;
        public PlayerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_Player_Movment;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @InventoryOpen => m_Wrapper.m_Player_InventoryOpen;
        public InputAction @Roll => m_Wrapper.m_Player_Roll;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @QuickSlot => m_Wrapper.m_Player_QuickSlot;
        public InputAction @LockedCam => m_Wrapper.m_Player_LockedCam;
        public InputAction @InteractOpen => m_Wrapper.m_Player_InteractOpen;
        public InputAction @MapOpen => m_Wrapper.m_Player_MapOpen;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movment.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovment;
                @Movment.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovment;
                @Movment.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovment;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @InventoryOpen.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInventoryOpen;
                @InventoryOpen.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInventoryOpen;
                @InventoryOpen.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInventoryOpen;
                @Roll.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRoll;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @QuickSlot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQuickSlot;
                @QuickSlot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQuickSlot;
                @QuickSlot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQuickSlot;
                @LockedCam.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLockedCam;
                @LockedCam.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLockedCam;
                @LockedCam.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLockedCam;
                @InteractOpen.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractOpen;
                @InteractOpen.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractOpen;
                @InteractOpen.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractOpen;
                @MapOpen.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMapOpen;
                @MapOpen.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMapOpen;
                @MapOpen.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMapOpen;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movment.started += instance.OnMovment;
                @Movment.performed += instance.OnMovment;
                @Movment.canceled += instance.OnMovment;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @InventoryOpen.started += instance.OnInventoryOpen;
                @InventoryOpen.performed += instance.OnInventoryOpen;
                @InventoryOpen.canceled += instance.OnInventoryOpen;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @QuickSlot.started += instance.OnQuickSlot;
                @QuickSlot.performed += instance.OnQuickSlot;
                @QuickSlot.canceled += instance.OnQuickSlot;
                @LockedCam.started += instance.OnLockedCam;
                @LockedCam.performed += instance.OnLockedCam;
                @LockedCam.canceled += instance.OnLockedCam;
                @InteractOpen.started += instance.OnInteractOpen;
                @InteractOpen.performed += instance.OnInteractOpen;
                @InteractOpen.canceled += instance.OnInteractOpen;
                @MapOpen.started += instance.OnMapOpen;
                @MapOpen.performed += instance.OnMapOpen;
                @MapOpen.canceled += instance.OnMapOpen;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_InventoryClose;
    public struct InventoryActions
    {
        private @PlayerController m_Wrapper;
        public InventoryActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @InventoryClose => m_Wrapper.m_Inventory_InventoryClose;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @InventoryClose.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnInventoryClose;
                @InventoryClose.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnInventoryClose;
                @InventoryClose.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnInventoryClose;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InventoryClose.started += instance.OnInventoryClose;
                @InventoryClose.performed += instance.OnInventoryClose;
                @InventoryClose.canceled += instance.OnInventoryClose;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_MapClose;
    public struct MapActions
    {
        private @PlayerController m_Wrapper;
        public MapActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MapClose => m_Wrapper.m_Map_MapClose;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @MapClose.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMapClose;
                @MapClose.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMapClose;
                @MapClose.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMapClose;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MapClose.started += instance.OnMapClose;
                @MapClose.performed += instance.OnMapClose;
                @MapClose.canceled += instance.OnMapClose;
            }
        }
    }
    public MapActions @Map => new MapActions(this);

    // Container
    private readonly InputActionMap m_Container;
    private IContainerActions m_ContainerActionsCallbackInterface;
    private readonly InputAction m_Container_ContainerClose;
    public struct ContainerActions
    {
        private @PlayerController m_Wrapper;
        public ContainerActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContainerClose => m_Wrapper.m_Container_ContainerClose;
        public InputActionMap Get() { return m_Wrapper.m_Container; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ContainerActions set) { return set.Get(); }
        public void SetCallbacks(IContainerActions instance)
        {
            if (m_Wrapper.m_ContainerActionsCallbackInterface != null)
            {
                @ContainerClose.started -= m_Wrapper.m_ContainerActionsCallbackInterface.OnContainerClose;
                @ContainerClose.performed -= m_Wrapper.m_ContainerActionsCallbackInterface.OnContainerClose;
                @ContainerClose.canceled -= m_Wrapper.m_ContainerActionsCallbackInterface.OnContainerClose;
            }
            m_Wrapper.m_ContainerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ContainerClose.started += instance.OnContainerClose;
                @ContainerClose.performed += instance.OnContainerClose;
                @ContainerClose.canceled += instance.OnContainerClose;
            }
        }
    }
    public ContainerActions @Container => new ContainerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnInventoryOpen(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnQuickSlot(InputAction.CallbackContext context);
        void OnLockedCam(InputAction.CallbackContext context);
        void OnInteractOpen(InputAction.CallbackContext context);
        void OnMapOpen(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnInventoryClose(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnMapClose(InputAction.CallbackContext context);
    }
    public interface IContainerActions
    {
        void OnContainerClose(InputAction.CallbackContext context);
    }
}
